* Remove directory structure configuration option
* Setup document - List dependencies, camera, apache, etc.
* Peers server pointers
* Make it work for non absolute paths?
* Browse to next from js image flipper
* Make JS image flipper default



To do next:

Review relaunch logic for dark images

* Mention about logging in to console with stuff printing somewhere

Future features:
* glitch detection for more than one frame?
* Option to not save pre and post event images?
* Image save rate liminting (raise threshold when too many aquired)



Exposure thing from Markus (Jan 31 2016)
    Hab ein bisschen experimentiert.

    Die Raspicam functionality ist dumm.  Eine fully interactive camera, 
    preview window etc. mit programmatic interactive control, statt ein 
    generic image capture device.

    Wenn man raspistill laufen lasst, auch mit manual exposure, ist es 
    langsam.  Wenn man burst captures macht wie du ist erstens das lange 
    startup delay (missed motion events) und zweitens natuerlich das 
    nicht-AE-tracking.

    Aber eins geht, nach allerhand experimentieren rausgekriegt:

    raspistill -tl 0 -t 0 -hf -vf -q 10  -w 1280 -h 960 -s -o img%05d.jpg

    Das ist nicht burst mode.  Sondern macht continuous AE tracking und der 
    "shutter button" ist ein USR1 signal.  Also das obere statt burst mode, 
    und dann separat alle 100ms oder so ein "shutter button" signal mit 
    (shell loop):

    while true; do sleep 0.1; killall -USR1 raspistill; done

    Etwas Murks, die meisten signals haben keinen Effekt da es ja noch dran 
    ist.  Aber diese incantation schafft so 2 exposures/sec und das *during* 
    exposure adjustments, wie es sollte.

    Raspistill command startup ist eben das equivalent von "turn on and boot 
    up camera", nicht "shutter button press".

    Natuerlich wuerde dein Programm Aenderungen brauchen, und dafuer hab ich 
    grad keine motivation:  Don't restart raspistill unless it dies/fails to 
    write picture files.  Don't treat overall brightness changes as motion 
    events.  Und send USR1 signals zum child process.

    Resultat von einem Experiment:

    http://wandel.ca/misc/rtest

